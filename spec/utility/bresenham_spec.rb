# frozen_string_literal: true

RSpec.describe Utility::Bresenham, :module_concern_context do
  describe '#points' do
    it 'returns 2D array of coordinates', :aggregate_failures do
      expect(instance.points(0, 0, 0, 0)).to match_array([[0, 0]])
      expect(instance.points(0, 0, 0, 1)).to match_array([[0, 0], [0, 1]])
      expect(instance.points(0, 0, 1, 0)).to match_array([[0, 0], [1, 0]])
      expect(instance.points(0, 0, 1, 1)).to match_array([[0, 0], [1, 1]])
      expect(instance.points(0, 1, 0, 0)).to match_array([[0, 1], [0, 0]])
      expect(instance.points(0, 1, 1, 0)).to match_array([[0, 1], [1, 0]])
      expect(instance.points(0, 1, 1, 1)).to match_array([[0, 1], [1, 1]])
      expect(instance.points(1, 0, 0, 1)).to match_array([[1, 0], [0, 1]])
      expect(instance.points(1, 0, 0, 0)).to match_array([[1, 0], [0, 0]])
      expect(instance.points(1, 0, 1, 1)).to match_array([[1, 0], [1, 1]])
      expect(instance.points(1, 1, 0, 1)).to match_array([[1, 1], [0, 1]])
      expect(instance.points(1, 1, 1, 0)).to match_array([[1, 1], [1, 0]])
      expect(instance.points(1, 1, 0, 0)).to match_array([[1, 1], [0, 0]])
      expect(instance.points(0, 0, 0, 2)).to match_array([[0, 0], [0, 1], [0, 2]])
      expect(instance.points(0, 0, 1, 2)).to match_array([[0, 0], [0, 1], [1, 2]])
      expect(instance.points(0, 0, 2, 0)).to match_array([[0, 0], [1, 0], [2, 0]])
      expect(instance.points(0, 0, 2, 1)).to match_array([[0, 0], [1, 0], [2, 1]])
      expect(instance.points(0, 0, 2, 2)).to match_array([[0, 0], [1, 1], [2, 2]])
      expect(instance.points(0, 1, 0, 2)).to match_array([[0, 1], [0, 2]])
      expect(instance.points(0, 1, 1, 2)).to match_array([[0, 1], [1, 2]])
      expect(instance.points(0, 1, 2, 0)).to match_array([[0, 1], [1, 1], [2, 0]])
      expect(instance.points(0, 1, 2, 1)).to match_array([[0, 1], [1, 1], [2, 1]])
      expect(instance.points(0, 1, 2, 2)).to match_array([[0, 1], [1, 1], [2, 2]])
      expect(instance.points(0, 2, 0, 0)).to match_array([[0, 0], [0, 1], [0, 2]])
      expect(instance.points(0, 2, 1, 0)).to match_array([[0, 2], [1, 0], [1, 1]])
      expect(instance.points(0, 2, 2, 0)).to match_array([[0, 2], [1, 1], [2, 0]])
      expect(instance.points(0, 2, 2, 1)).to match_array([[0, 2], [1, 2], [2, 1]])
      expect(instance.points(0, 2, 2, 2)).to match_array([[0, 2], [1, 2], [2, 2]])
      expect(instance.points(0, 2, 0, 1)).to match_array([[0, 2], [0, 1]])
      expect(instance.points(0, 2, 1, 1)).to match_array([[0, 2], [1, 1]])
      expect(instance.points(0, 2, 1, 2)).to match_array([[0, 2], [1, 2]])
      expect(instance.points(1, 0, 1, 2)).to match_array([[1, 0], [1, 1], [1, 2]])
      expect(instance.points(1, 0, 2, 0)).to match_array([[1, 0], [2, 0]])
      expect(instance.points(1, 0, 2, 1)).to match_array([[1, 0], [2, 1]])
      expect(instance.points(1, 0, 2, 2)).to match_array([[1, 0], [1, 1], [2, 2]])
      expect(instance.points(1, 1, 0, 2)).to match_array([[1, 1], [0, 2]])
      expect(instance.points(1, 1, 1, 2)).to match_array([[1, 1], [1, 2]])
      expect(instance.points(1, 1, 2, 0)).to match_array([[1, 1], [2, 0]])
      expect(instance.points(1, 1, 2, 1)).to match_array([[1, 1], [2, 1]])
      expect(instance.points(1, 1, 2, 2)).to match_array([[1, 1], [2, 2]])
      expect(instance.points(1, 2, 0, 0)).to match_array([[0, 0], [0, 1], [1, 2]])
      expect(instance.points(1, 2, 0, 1)).to match_array([[1, 2], [0, 1]])
      expect(instance.points(1, 2, 2, 0)).to match_array([[1, 2], [2, 0], [2, 1]])
      expect(instance.points(1, 2, 0, 2)).to match_array([[1, 2], [0, 2]])
      expect(instance.points(1, 2, 1, 0)).to match_array([[1, 0], [1, 1], [1, 2]])
      expect(instance.points(1, 2, 1, 1)).to match_array([[1, 2], [1, 1]])
      expect(instance.points(1, 2, 2, 1)).to match_array([[1, 2], [2, 1]])
      expect(instance.points(1, 2, 2, 2)).to match_array([[1, 2], [2, 2]])
      expect(instance.points(2, 0, 0, 0)).to match_array([[0, 0], [1, 0], [2, 0]])
      expect(instance.points(2, 0, 0, 1)).to match_array([[0, 1], [1, 1], [2, 0]])
      expect(instance.points(2, 0, 0, 2)).to match_array([[0, 2], [1, 1], [2, 0]])
      expect(instance.points(2, 0, 1, 0)).to match_array([[2, 0], [1, 0]])
      expect(instance.points(2, 0, 1, 1)).to match_array([[2, 0], [1, 1]])
      expect(instance.points(2, 0, 1, 2)).to match_array([[1, 2], [2, 0], [2, 1]])
      expect(instance.points(2, 0, 2, 1)).to match_array([[2, 0], [2, 1]])
      expect(instance.points(2, 0, 2, 2)).to match_array([[2, 0], [2, 1], [2, 2]])
      expect(instance.points(2, 1, 0, 0)).to match_array([[0, 0], [1, 0], [2, 1]])
      expect(instance.points(2, 1, 0, 1)).to match_array([[0, 1], [1, 1], [2, 1]])
      expect(instance.points(2, 1, 0, 2)).to match_array([[0, 2], [1, 2], [2, 1]])
      expect(instance.points(2, 1, 1, 0)).to match_array([[2, 1], [1, 0]])
      expect(instance.points(2, 1, 1, 1)).to match_array([[2, 1], [1, 1]])
      expect(instance.points(2, 1, 1, 2)).to match_array([[2, 1], [1, 2]])
      expect(instance.points(2, 1, 2, 0)).to match_array([[2, 1], [2, 0]])
      expect(instance.points(2, 1, 2, 2)).to match_array([[2, 1], [2, 2]])
      expect(instance.points(2, 2, 0, 0)).to match_array([[0, 0], [1, 1], [2, 2]])
      expect(instance.points(2, 2, 0, 1)).to match_array([[0, 1], [1, 1], [2, 2]])
      expect(instance.points(2, 2, 0, 2)).to match_array([[2, 2], [1, 2], [0, 2]])
      expect(instance.points(2, 2, 1, 0)).to match_array([[2, 2], [1, 1], [1, 0]])
      expect(instance.points(2, 2, 1, 1)).to match_array([[2, 2], [1, 1]])
      expect(instance.points(2, 2, 1, 2)).to match_array([[2, 2], [1, 2]])
      expect(instance.points(2, 2, 2, 0)).to match_array([[2, 2], [2, 1], [2, 0]])
      expect(instance.points(2, 2, 2, 1)).to match_array([[2, 2], [2, 1]])
      expect(instance.points(41, 32, 120, 49)).to match_array(points_from_file('41_32_120_49'))
      expect(instance.points(120, 49, 41, 32)).to match_array(points_from_file('41_32_120_49'))
      expect(instance.points(19, 9, 27, 132)).to match_array(points_from_file('19_9_27_132'))
      expect(instance.points(27, 132, 19, 9)).to match_array(points_from_file('19_9_27_132'))
    end
  end
end
